define nagios::resource::service(
  $bexport,
  $target,
  $check_command,
  $use,
  $hostgroup_name = '',
  $ensure = 'present',
  $max_check_attempts = '5',
  $check_period = '24x7',
  $notification_interval = '30',
  $notification_period = '24x7',
  $first_notification_delay,
  $active_checks_enabled,
  $passive_checks_enabled,
  #$obsess_over_service,
  $check_freshness,
  $notifications_enabled,
  $event_handler_enabled,
  $event_handler,
  $flap_detection_enabled,
  $flap_detection_options,
  $low_flap_threshold,
  $high_flap_threshold,
  $process_perf_data,
  $retain_status_information,
  $retain_nonstatus_information,
  $is_volatile,
  $check_interval,
  $retry_interval,
  $contact_groups,
  $notification_options,
  $service_description,
  $display_name,
  $parents,
  $servicegroups,
  $initial_state,
  $stalking_options,
  $notes,
  $notes_url,
  $action_url,
) {

  include nagios::params

  if $bexport {
    @@nagios_host {$name:
      ensure => $ensure,
      check_command => $check_command,
      use => $use,
      target => $target,
      max_check_attempts => $max_check_attempts,
      check_period => $check_period,
      notification_interval => $notification_interval,
      notification_period => $notification_period,
      first_notification_delay => $first_notification_delay,
      active_checks_enabled => $active_checks_enabled,
      passive_checks_enabled => $passive_checks_enabled,
      #obsess_over_service => $obsess_over_service,
      check_freshness => $check_freshness,
      notifications_enabled => $notifications_enabled,
      event_handler_enabled => $event_handler_enabled,
      event_handler => $event_handler,
      flap_detection_enabled => $flap_detection_enabled,
      flap_detection_options => $flap_detection_options,
      low_flap_threshold => $low_flap_threshold,
      high_flap_threshold => $high_flap_threshold,
      process_perf_data => $process_perf_data,
      retain_status_information => $retain_status_information,
      retain_nonstatus_information => $retain_nonstatus_information,
      is_volatile => $is_volatile,
      check_interval => $check_interval,
      retry_interval => $retry_interval,
      contact_groups => $contact_groups,
      notification_options => $notification_options,
      service_description => $service_description,
      display_name => $display_name,
      parents => $parents,
      servicegroups => $servicegroups,
      initial_state	=> $initial_state,
      stalking_options => $stalking_options,
      notes => $notes,
      notes_url => $notes_url,
      action_url => $action_url,
    }
  } else {

    nagios_host { $name:
      ensure => $ensure,
      check_command => $check_command,
      use => $use,
      target => $target,
      require => File[$nagios::params::resource_dir],
      max_check_attempts => $max_check_attempts,
      check_period => $check_period,
      notification_interval => $notification_interval,
      notification_period => $notification_period,
      first_notification_delay => $first_notification_delay,
      active_checks_enabled => $active_checks_enabled,
      passive_checks_enabled => $passive_checks_enabled,
      #obsess_over_service => $obsess_over_service,
      check_freshness => $check_freshness,
      notifications_enabled => $notifications_enabled,
      event_handler_enabled => $event_handler_enabled,
      event_handler => $event_handler,
      flap_detection_enabled => $flap_detection_enabled,
      flap_detection_options => $flap_detection_options,
      low_flap_threshold => $low_flap_threshold,
      high_flap_threshold => $high_flap_threshold,
      process_perf_data => $process_perf_data,
      retain_status_information => $retain_status_information,
      retain_nonstatus_information => $retain_nonstatus_information,
      is_volatile => $is_volatile,
      check_interval => $check_interval,
      retry_interval => $retry_interval,
      contact_groups => $contact_groups,
      notification_options => $notification_options,
      service_description => $service_description,
      display_name => $display_name,
      parents => $parents,
      servicegroups => $servicegroups,
      initial_state	=> $initial_state,
      stalking_options => $stalking_options,
      notes => $notes,
      notes_url => $notes_url,
      action_url => $action_url,
    }
  }
}
